{"version":3,"sources":["components/Forecast/BeachInfo.jsx","components/Forecast/Forecast.jsx","App.js","serviceWorker.js","index.js"],"names":["BeachInfo","_ref","Pico","react_default","a","createElement","className","src","URI_Foto_Prev","alt","class","index_esm","Nome_Praia","Nome_Pico","gi_index_esm","Desc_Nivel","Altura_Min_Onda","Altura_Max_Onda","Nota_Qualidade_Surf","ai_index_esm","type","Content","styled","div","_templateObject","Forecast","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","preencherCard","pico","console","log","setState","value","opcaoSelecionada","state","Picos","_this2","axios","get","then","res","data","catch","err","fetchData","prevProps","_this$state","htmlFor","Spinner","animation","react_select_browser_esm","onChange","options","map","index","label","Data","Forecast_BeachInfo","Component","App_templateObject","App","Spot_Name","Beach_Name","Fragment","BrowserRouter","App_Content","Switch","components_Forecast_Forecast","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4TAgCeA,EAxBG,SAAAC,GAAc,IAAXC,EAAWD,EAAXC,KAEnB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAEfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAeC,IAAKL,EAAKM,cAAeC,IAAI,KACzDN,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAc,IAA5B,6BAEAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBAAuBI,MAAM,SAG1CP,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAOH,EAAAC,EAAAC,cAACM,EAAA,EAAD,MAArB,IAAgCR,EAAAC,EAAAC,cAAA,2BAA2BH,EAAKU,YAChET,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,IAA6BH,EAAAC,EAAAC,cAACM,EAAA,EAAD,MAA7B,IAAiDR,EAAAC,EAAAC,cAAA,yBAAjD,IAA2EH,EAAKW,WAChFV,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,KAA8BH,EAAAC,EAAAC,cAACS,EAAA,EAAD,MAA9B,KAA6CX,EAAAC,EAAAC,cAAA,yBAA7C,IAAuEH,EAAKa,YAC5EZ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,IAA6BH,EAAAC,EAAAC,cAACS,EAAA,EAAD,MAA7B,IAA8CX,EAAAC,EAAAC,cAAA,gCAA9C,OAAkFH,EAAKc,gBAAvF,MAA2Gd,EAAKe,iBAChHd,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAcH,EAAAC,EAAAC,cAACS,EAAA,EAAD,MAA5B,IAA4CX,EAAAC,EAAAC,cAAA,+BAA+BH,EAAKgB,oBAAoBf,EAAAC,EAAAC,cAACc,EAAA,EAAD,OACpGhB,EAAAC,EAAAC,cAAA,UAAQe,KAAK,SAASV,MAAM,mBAA5B,qrCClBV,IAAMW,EAAUC,IAAOC,IAAVC,KA0JEC,cAxFb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAYRQ,cAAgB,SAACC,GACfC,QAAQC,IAAIF,GACZR,EAAKW,SAAS,CAEZpC,KAAMiC,EAAKI,MACXC,iBAAkBL,KAhBpBR,EAAKc,MAAQ,CAEXC,MAAO,GACPF,iBAAkB,GAClBtC,KAAM,IANSyB,2EAsBP,IAAAgB,EAAAb,KAGVc,IACGC,IAAI,8CACJC,KAAK,SAACC,GAILJ,EAAKL,SAAS,CAEZI,MAAOK,EAAIC,SAGdC,MAAM,SAACC,GAAD,OAASd,QAAQC,IAAIa,iDAG9BpB,KAAKqB,uDAIYC,GACjBtB,KAAKqB,6CAEE,IAAAE,EAMHvB,KAAKW,MAHPC,EAHKW,EAGLX,MACAxC,EAJKmD,EAILnD,KACAsC,EALKa,EAKLb,iBAEF,OACErC,EAAAC,EAAAC,cAACgB,EAAD,CAASf,UAAU,kBACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sCACbH,EAAAC,EAAAC,cAAA,SAAOiD,QAAQ,6BACdnD,EAAAC,EAAAC,cAACkD,EAAA,EAAD,CAAS7C,MAAM,IAAI8C,UAAU,SAD9B,IACyC,MADzC,oBAGArD,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CAEEC,SAAU5B,KAAKI,cACfK,MAAOC,EACPmB,QAASjB,EAAMkB,IAAI,SAACzB,EAAM0B,GACxB,MAAO,CACLtB,MAAOJ,EACP2B,MACE3B,EAAK4B,KACL,MACA5B,EAAKvB,WACL,MACAuB,EAAKtB,iBAMjBV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC2D,EAAD,CAAW9D,KAAMA,cAjFN+D,kTChEvB,IAAM5C,EAAUC,IAAOC,IAAV2C,KAyCEC,cA3Bb,SAAAA,EAAYzC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAqC,IACnBxC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAuC,GAAAlC,KAAAH,KAAMJ,KACDe,MAAQ,CACX2B,UAAW,YACXC,WAAY,oBAJK1C,wEAUjB,OACExB,EAAAC,EAAAC,cAACF,EAAAC,EAAMkE,SAAP,KACEnE,EAAAC,EAAAC,cAACkE,EAAA,EAAD,KACEpE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAACmE,EAAD,KACMrE,EAAAC,EAAAC,cAACoE,EAAA,EAAD,KACAtE,EAAAC,EAAAC,cAACqE,EAAD,kBAlBFT,aCREU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uECXNC,IAASC,OAAO9E,EAAAC,EAAAC,cAAC6E,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzC,KAAK,SAAA0C,GACjCA,EAAaC","file":"static/js/main.9168d407.chunk.js","sourcesContent":["import React from 'react';\nimport { FaWater, FaUmbrellaBeach } from 'react-icons/fa';\nimport { GiWaveSurfer, GiSurfBoard, Gi3DStairs} from 'react-icons/gi';\nimport { AiOutlineStar } from 'react-icons/ai';\n\n\n\n\nconst BeachInfo = ({ Pico }) => {\n  \n  return (\n    <div className=\"card\">\n      <div className=\"card-body\">\n      \n      <img className=\"card-img-top\" src={Pico.URI_Foto_Prev} alt=\"\"></img>\n        <h4 className=\"card-title\">{\" \"}Previsões da PicoCerto</h4> \n        \n        <div className=\"flex justify-content\" class=\"beach\">\n        \n        \n          <h6 className=\"text\"><FaWater/> <strong> Praia : </strong>{Pico.Nome_Praia}</h6>\n          <h6 className=\"text-inline\"> <FaUmbrellaBeach /> <strong>Pico : </strong> {Pico.Nome_Pico}</h6>\n          <h6 className=\"text-inline\">  <Gi3DStairs/>  <strong>Nivel :</strong> {Pico.Desc_Nivel}</h6>\n          <h6 className=\"text-inline\"> <GiWaveSurfer /> <strong>Altura (ft) : </strong> De {Pico.Altura_Min_Onda} a {Pico.Altura_Max_Onda}</h6>\n          <h6 className=\"text-inline\"><GiSurfBoard /> <strong> Qualidade : </strong>{Pico.Nota_Qualidade_Surf}<AiOutlineStar/></h6>\n          <button type=\"button\" class=\"btn btn-success\">Clique aqui para agendar sua trip!</button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default BeachInfo;\n\n","import React, { Component } from \"react\";\nimport Select from \"react-select\";\nimport styled from \"styled-components\";\nimport axios from \"axios\";\nimport BeachInfo from \"./BeachInfo\";\nimport Spinner from \"react-bootstrap/Spinner\";\n\nconst Content = styled.div`\nwidth: 100%; // make sure the parent is full screen \nheight: 100%; // so that the content will center correctly\n  height: auto;\n  margin: auto;\n   \n  .card {\n  \ntext-align: fixed;\njustify-content: center;\npadding: 15px;\nmargin: 10px;\npadding-top: 5px;     \nbox-shadow: 1 1 5px 0 #000;\npadding: 10px;  \n  \n}\n@media screen and (min-width: 1800px) {\n      \n    \n    .beach{\n    max-height: 200px;\n    padding-top: 10px;\nheight: 50%;\nwidth: auto;\njustify-content: center;\nresize: auto;\ntext-align: center;\n}\n.card {\n  text-align: center;\n  padding-top: 10px;\n  padding-left: 50%;\n  resize:auto;\n}@media screen and (min-width: 2000px) {\n    text-align: center; \n    resize: auto;\n      .card-img-top{\n      max-height: 200px;\n      padding: auto;\n  height: 50%;\n  width: auto;\n  justify-content: center;\n  resize: auto;\n  }\n  \n  \n   \n    }\n  \n  \n    \n  \n  label {\n    size: 100%;\n    font-size: 1.5em;\n    color: #2fbc1a;\n    justify-content: center;\n    \n  }.card {\n  resize:auto;}\n.flex-wrapper {justify-content: center;}\n} \n`;\n\nclass Forecast extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      //Dados sobre o pico (dummy data)\n      Picos: [],\n      opcaoSelecionada: \"\",\n      Pico: [],\n    };\n  }\n\n  // fetchData() {\n  // Quando o usuário selecionar um pico no campo select, os dados desse pico devem ser passados para\n  // o card de previsão, famoso atualizar o status do componente.\n  preencherCard = (pico) => {\n    console.log(pico);\n    this.setState({\n      //Criando uma cariavel para receber todo o Json,\n      Pico: pico.value,\n      opcaoSelecionada: pico,\n    });\n  };\n\n  fetchData() {\n    //Numero Fixo. Ao Renderizar o componente esse número deve ser recebido\n    //Ex: fetchData(ID_Prev_OPC)\n    axios\n      .get(\"http://demo6039565.mockable.io/PrevisaoOPC\")\n      .then((res) => {\n        // console.log(res.data);\n        //Provavelmente é necessário fazer um map para percorrer todo o json e preencher uma lista\n        //Ou talvez, apenas salvar uma variavel DATA = res.data\n        this.setState({\n          //Criando uma cariavel para receber todo o Json\n          Picos: res.data,\n        });\n      })\n      .catch((err) => console.log(err));\n  }\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  //change spot\n  componentDidUpdate(prevProps) {\n    this.fetchData();\n  }\n  render() {\n    const {\n      //Passando a variavel com  todo json\n      Picos,\n      Pico,\n      opcaoSelecionada,\n    } = this.state;\n    return (\n      <Content className=\"flex-container\">\n        <div className=\"row mb-3\">\n          <div className=\"form-group col-lg-4 col-sm-10 mt-3\">\n            <label htmlFor=\"exampleFormControlSelect1\">\n             <Spinner class=\"a\" animation=\"grow\" /> {\"   \"}Selecione o pico\n            </label>\n            <Select\n              //Quando clicar na opção é necessário fazer o fetch novamente, pelo indice da opção que foi clicada\n              onChange={this.preencherCard}\n              value={opcaoSelecionada}\n              options={Picos.map((pico, index) => {\n                return {\n                  value: pico,\n                  label:\n                    pico.Data +\n                    \" - \" +\n                    pico.Nome_Praia +\n                    \" - \" +\n                    pico.Nome_Pico,\n                };\n              })}\n            ></Select>\n          </div>\n        </div>\n        <div className=\"row flex-wrap\">\n          <div>\n            <BeachInfo Pico={Pico} />\n          </div>\n        </div>\n      </Content>\n    );\n  }\n}\n\nexport default Forecast;","import React, { Component } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Switch } from 'react-router-dom';\nimport styled from 'styled-components';\nimport Forecast from './components/Forecast/Forecast';\n\n\n\nconst Content = styled.div`\nwidth: 100%; // make sure the parent is full screen \nheight: 100%; // so that the content will center correctly\n\n  padding: 20px;\n  min-height: 50%;\n  transition: all 0.3s;\n  font-family: 'Raleway', sans-serif;\n  \n`;\n// test\n\nclass App extends Component {\n  \n  constructor(props) {\n  super(props);\n  this.state = {\n    Spot_Name: 'Cabo Frio',\n    Beach_Name: 'Praia do Foguete',\n     \n  };}\n\n\n  render() {\n    return (\n      <React.Fragment>\n        <Router>\n          <div className=\"flex wrapper\">\n              <Content>         \n                    <Switch>\n                    <Forecast\n                    />\n              </Switch>\n            </Content>\n          </div>\n        </Router>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'font-awesome/css/font-awesome.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}